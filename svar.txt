Mer utförliga svar:
https://github.com/FEND16/programmeringsmetodik/blob/master/exercises/10_git_commands.md
Frågor

Hur startar man ett lokalt git-repository i en mapp på sin dator?

SVAR: git init

Hur lägger man till en remote till sitt lokala repository?

SVAR: git add origin (adressen kopierad från GitHub)

Hur klonar man ner ett redan existerande repository från GitHub?

SVAR: git clone (adressen kopierad från GitHub)

Hur kan man få en grafisk representation av hur ens commits ser ut?

SVAR: gitk - öppnar det grafiska gränssnittet. gitk --all för att se alla branches.

---

Övningar

Skapa ett lokalt repo som du ska jobba utifrån där du skapar en fil: main.txt

SVAR git init + touch main.txt

Använd terminalen för att skriva "This is a master edit" i main.txt

SVAR: git echo "This is a master edit" >> main.txt

Lägg till dina ändringar som du gjorde i main.txt i staging area och gör sedan en commit med valfritt meddelande.

SVAR: git add . + git commit -m "meddelande" 

Använd gitk för att se dina commits

SVAR: gitk

-----

Branching out

Skapa en ny branch som heter fix och lista sedan alla branches som du har skapat för att se att du har två olika branches, den ena ska vara master den andra ska vara fix som du precis skapade.

SVAR: git checkout -b fix + git branch

Lägg till "This is a branch edit" på rad 2 i main.txt Gör sedan en commit medan du står på branchen fix. Använd sedan gitk --all för att se hur dina commits ser ut.

SVAR: echo "This is a branch edit" >> main.txt + git add . + git commit - m "edits" + gitk --all
Branches ser ut som en rät linje, men fix ligger före master eftersom den är senast ändrad.

Gå tillbaka till din master branch med git checkout master och ändra första raden i main.txt till "This is a second master edit". Lägg till och commita din ändring. Använd sedan gitk --all för att se dina ändringar i alla branches.

-- Nu ligger master först eftersom den är senast ändrad, och fix är en förgrening under eftersom den innehåller andra saker

Gå till branchen fix med checkout och skapa ytterligare en ny branch medan du står på branchen fix. Döp den nya branchen till fix-fix

Gör en ändring i main.txt medan du är på branchen fix-fix där du lägger till följande på rad 3: "This is a branch branch edit" Lägg till och commita din ändring och använd sedan gitk --all för att se hur dina branches ser ut.

-- Nu ligger fix-fix överst, följd av fix, och master är en förgrening under.

Gå tillbaka till fix branchen med git checkout fix. Gör sedan en ändring på fjärde raden: "Edits never end!". 
Commita din ändring och använd sedan gitk --all för att se hur din struktur ser ut.

-- Nu ligger fix överst med fix-fix och master som förgreningar under.

-----

Merging in

Vi börjar med att merga in vår fix-fix i fix. D.v.s den "yttersta" branchen i den näst yttersta branchen med hjälp av git merge. nu måste vi också se till att lösa våra konfilkter.

SVAR: stå i fix. git merge fix-fix. Den klagar på konsflikter. Lös dem i textedidor och kör git add . sedan git commit -m "medd" så är den mergad.

När vi har löst eventuella konflikter i den första mergen kan vi merga in fixi master. Här kommer det även förekomma konflikter som vi måste lösa på samma sätt som tidigare genom att redigera textfilen samt göra en ny commit.

SVAR: git checkout master + git merge fix + ändra konflikter + git add . + git commit -m "medd" 

Använd sedan gitk för att se hur din repository ser ut just nu.

SVAR: förgreningarna har dragit ihop sig till mastergrenen.

Nu borde master vara uppdaterad med både ändringar från fix och fix-fix. Dock så är inte merge optimalt i alla fall. Ibland kan det även vara bra att använda en rebase.

----

Drop the rebase

Dock så ska man inte alltid merga, det är ganska vanligt att man istället använder en rebase för att få bättre struktur i sitt repository samt att det kan vara lättare att lösa konflikter ibland med en rebase.

Använd kommandot git rebase för att rebasea fix-fix in i master. Ställ dig först i master branch för att sedan använda kommandot git rebase fix-fix. Här kommer du att mötas av en rad konflikter precis som att du skulle göra en merge.

För att lösa konflikterna som uppstår här måste vi först ändra i textfilen main.txt så att allt som ska var kvar är där och det som ska tas bort raderas. När vi är klara med våra redigeringar skriver vi git add main.txt för att lägga till ändringarna. Sedan fortsätter vi vår rebase med att använda git rebase --continue. Beroende på hur många konflikter vi har får vi göra det här ett antal gånger.

Använd gitk --all för att nu se hur ditt projekt ser ut
--  lite uppstädat

Om man vill städa upp lite i sina branches kan man använda git branch -d fix samt git branch -d fix-fix för att radera våra branches. Nu har vi antingen rebaseat eller mergat in våra ändringar så nu finns alla ändringar i master. Nu kan vi ta bort dessa branches eftersom de är nu överflödiga.

Om du fortfarande har ändringar kvar i någon av brancherna kan man använda stort -D istället för att tvinga git att ta bort branchen.





